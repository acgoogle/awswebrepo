{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "VPC: highly available SSH bastion host/instance, a cloudonaut.io template",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Parent Stacks"
                    },
                    "Parameters": [
                        "ParentVPCStack",
                        "ParentAlertStack"
                    ]
                },
                {
                    "Label": {
                        "default": "EC2 Parameters"
                    },
                    "Parameters": [
                        "InstanceType",
                        "KeyName",
                        "IAMUserSSHAccess",
                        "LogsRetentionInDays",
                        "NewRelicLicenseKey"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "ParentVPCStack": {
            "Description": "Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.",
            "Type": "String"
        },
        "ParentAlertStack": {
            "Description": "Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.",
            "Type": "String",
            "Default": ""
        },
        "KeyName": {
            "Description": "Optional key pair of the ec2-user to establish a SSH connection to the SSH bastion host/instance.",
            "Type": "String",
            "Default": ""
        },
        "IAMUserSSHAccess": {
            "Description": "Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).",
            "Type": "String",
            "Default": false,
            "AllowedValues": [
                true,
                false
            ]
        },
        "InstanceType": {
            "Description": "Instance type of the SSH bastion host/instance.",
            "Type": "String",
            "Default": "t2.nano"
        },
        "LogsRetentionInDays": {
            "Description": "Specifies the number of days you want to retain log events.",
            "Type": "Number",
            "Default": 14,
            "AllowedValues": [
                1,
                3,
                5,
                7,
                14,
                30,
                60,
                90,
                120,
                150,
                180,
                365,
                400,
                545,
                731,
                1827,
                3653
            ]
        },
        "NewRelicLicenseKey": {
            "Description": "Optional New Relic License Key will install the New Relic Servers for Linux agent.",
            "Type": "String",
            "Default": "",
            "NoEcho": true
        }
    },
    "Mappings": {
        "RegionMap": {
            "ap-south-1": {
                "AMI": "ami-47205e28"
            },
            "eu-west-2": {
                "AMI": "ami-ed100689"
            },
            "eu-west-1": {
                "AMI": "ami-d7b9a2b1"
            },
            "ap-northeast-2": {
                "AMI": "ami-e21cc38c"
            },
            "ap-northeast-1": {
                "AMI": "ami-3bd3c45c"
            },
            "sa-east-1": {
                "AMI": "ami-87dab1eb"
            },
            "ca-central-1": {
                "AMI": "ami-a7aa15c3"
            },
            "ap-southeast-1": {
                "AMI": "ami-77af2014"
            },
            "ap-southeast-2": {
                "AMI": "ami-10918173"
            },
            "eu-central-1": {
                "AMI": "ami-82be18ed"
            },
            "us-east-1": {
                "AMI": "ami-a4c7edb2"
            },
            "us-east-2": {
                "AMI": "ami-8a7859ef"
            },
            "us-west-1": {
                "AMI": "ami-327f5352"
            },
            "us-west-2": {
                "AMI": "ami-6df1e514"
            }
        }
    },
    "Conditions": {
        "HasKeyName": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "KeyName"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasIAMUserSSHAccess": {
            "Fn::Equals": [
                {
                    "Ref": "IAMUserSSHAccess"
                },
                "true"
            ]
        },
        "HasNewRelic": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NewRelicLicenseKey"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasAlertTopic": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ParentAlertStack"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Resources": {
        "EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "Logs": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": {
                    "Ref": "LogsRetentionInDays"
                }
            }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": {
                    "Fn::Sub": [
                        "SSH bastion host/instance 10.${ClassB}.0.0/16",
                        {
                            "ClassB": {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${ParentVPCStack}-ClassB"
                                }
                            }
                        }
                    ]
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-VPC"
                    }
                }
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "IAMRole"
                    }
                ]
            }
        },
        "IAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ec2",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:AssociateAddress"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "logs",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "IAMPolicySSHAccess": {
            "Type": "AWS::IAM::Policy",
            "Condition": "HasIAMUserSSHAccess",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "IAMRole"
                    }
                ],
                "PolicyName": "iam",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:ListUsers"
                            ],
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:ListSSHPublicKeys",
                                "iam:GetSSHPublicKey"
                            ],
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/*"
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "LaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "default": {
                            "Fn::If": [
                                "HasNewRelic",
                                {
                                    "Fn::If": [
                                        "HasIAMUserSSHAccess",
                                        [
                                            "awslogs",
                                            "ssh-access",
                                            "newrelic",
                                            "config"
                                        ],
                                        [
                                            "awslogs",
                                            "newrelic",
                                            "config"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "HasIAMUserSSHAccess",
                                        [
                                            "awslogs",
                                            "ssh-access",
                                            "config"
                                        ],
                                        [
                                            "awslogs",
                                            "config"
                                        ]
                                    ]
                                }
                            ]
                        }
                    },
                    "awslogs": {
                        "packages": {
                            "yum": {
                                "awslogs": []
                            }
                        },
                        "files": {
                            "/etc/awslogs/awscli.conf": {
                                "content": {
                                    "Fn::Sub": "[default]\nregion = ${AWS::Region}\n[plugins]\ncwlogs = cwlogs\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/awslogs/awslogs.conf": {
                                "content": {
                                    "Fn::Sub": "[general]\nstate_file = /var/lib/awslogs/agent-state\n[/var/log/messages]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/messages\nlog_stream_name = {instance_id}/var/log/messages\nlog_group_name = ${Logs}\n[/var/log/secure]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/secure\nlog_stream_name = {instance_id}/var/log/secure\nlog_group_name = ${Logs}\n[/var/log/cron]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/cron\nlog_stream_name = {instance_id}/var/log/cron\nlog_group_name = ${Logs}\n[/var/log/cloud-init.log]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/cloud-init.log\nlog_stream_name = {instance_id}/var/log/cloud-init.log\nlog_group_name = ${Logs}\n[/var/log/cfn-init.log]\ndatetime_format = %Y-%m-%d %H:%M:%S\nfile = /var/log/cfn-init.log\nlog_stream_name = {instance_id}/var/log/cfn-init.log\nlog_group_name = ${Logs}\n[/var/log/cfn-hup.log]\ndatetime_format = %Y-%m-%d %H:%M:%S\nfile = /var/log/cfn-hup.log\nlog_stream_name = {instance_id}/var/log/cfn-hup.log\nlog_group_name = ${Logs}\n[/var/log/cfn-init-cmd.log]\ndatetime_format = %Y-%m-%d %H:%M:%S\nfile = /var/log/cfn-init-cmd.log\nlog_stream_name = {instance_id}/var/log/cfn-init-cmd.log\nlog_group_name = ${Logs}\n[/var/log/cloud-init-output.log]\nfile = /var/log/cloud-init-output.log\nlog_stream_name = {instance_id}/var/log/cloud-init-output.log\nlog_group_name = ${Logs}\n[/var/log/dmesg]\nfile = /var/log/dmesg\nlog_stream_name = {instance_id}/var/log/dmesg\nlog_group_name = ${Logs}\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "awslogs": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "packages": {
                                        "yum": [
                                            "awslogs"
                                        ]
                                    },
                                    "files": [
                                        "/etc/awslogs/awslogs.conf",
                                        "/etc/awslogs/awscli.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "newrelic": {
                        "packages": {
                            "rpm": {
                                "newrelic-sysmond": "https://download.newrelic.com/pub/newrelic/el5/x86_64/newrelic-sysmond-2.3.0.132-1.x86_64.rpm"
                            }
                        },
                        "files": {
                            "/etc/newrelic/nrsysmond.cfg": {
                                "content": {
                                    "Fn::Sub": "license_key=${NewRelicLicenseKey}\nloglevel=info\nlogfile=/var/log/newrelic/nrsysmond.log\nlabels=StackName:${AWS::StackName};AccountId:${AWS::AccountId};Region:${AWS::Region}\n"
                                },
                                "mode": "000640",
                                "owner": "root",
                                "group": "newrelic"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "newrelic-sysmond": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/newrelic/nrsysmond.cfg"
                                    ]
                                }
                            }
                        }
                    },
                    "ssh-access": {
                        "files": {
                            "/opt/authorized_keys_command.sh": {
                                "content": "#!/bin/bash -e\nif [ -z \"$1\" ]; then\n  exit 1\nfi\nSaveUserName=\"$1\"\nSaveUserName=${SaveUserName//\"+\"/\".plus.\"}\nSaveUserName=${SaveUserName//\"=\"/\".equal.\"}\nSaveUserName=${SaveUserName//\",\"/\".comma.\"}\nSaveUserName=${SaveUserName//\"@\"/\".at.\"}\naws iam list-ssh-public-keys --user-name \"$SaveUserName\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do\n  aws iam get-ssh-public-key --user-name \"$SaveUserName\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text\ndone\n",
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/opt/import_users.sh": {
                                "content": "#!/bin/bash -e\naws iam list-users --query \"Users[].[UserName]\" --output text | while read User; do\n  SaveUserName=\"$User\"\n  SaveUserName=${SaveUserName//\"+\"/\".plus.\"}\n  SaveUserName=${SaveUserName//\"=\"/\".equal.\"}\n  SaveUserName=${SaveUserName//\",\"/\".comma.\"}\n  SaveUserName=${SaveUserName//\"@\"/\".at.\"}\n  if ! id -u \"$SaveUserName\" >/dev/null 2>&1; then\n    # don't grant sudo rights on bastion host!\n    /usr/sbin/useradd \"$SaveUserName\"\n  fi\ndone\n",
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cron.d/import_users": {
                                "content": "*/10 * * * * root /opt/import_users.sh\n",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "a_configure_sshd_command": {
                                "command": "sed -i \"s:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g\" /etc/ssh/sshd_config"
                            },
                            "b_configure_sshd_commanduser": {
                                "command": "sed -i \"s:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g\" /etc/ssh/sshd_config"
                            },
                            "c_import_users": {
                                "command": "./import_users.sh",
                                "cwd": "/opt"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "sshd": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "commands": [
                                        "a_configure_sshd_command",
                                        "b_configure_sshd_commanduser"
                                    ]
                                }
                            }
                        }
                    },
                    "config": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\ninterval=1\n"
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=LaunchConfiguration\nrunas=root\n"
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "AssociatePublicIpAddress": true,
                "EbsOptimized": false,
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SecurityGroup"
                    }
                ],
                "KeyName": {
                    "Fn::If": [
                        "HasKeyName",
                        {
                            "Ref": "KeyName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash -x\nINSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)\naws --region ${AWS::Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${EIP.AllocationId} && /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}\n"
                    }
                }
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "DesiredCapacity": 1,
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                },
                "MaxSize": 1,
                "MinSize": 1,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": [
                                "SSH bastion host/instance 10.${ClassB}.0.0/16",
                                {
                                    "ClassB": {
                                        "Fn::ImportValue": {
                                            "Fn::Sub": "${ParentVPCStack}-ClassB"
                                        }
                                    }
                                }
                            ]
                        },
                        "PropagateAtLaunch": true
                    }
                ],
                "NotificationConfigurations": {
                    "Fn::If": [
                        "HasAlertTopic",
                        [
                            {
                                "NotificationTypes": [
                                    "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                    "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                                ],
                                "TopicARN": {
                                    "Fn::ImportValue": {
                                        "Fn::Sub": "${ParentAlertStack}-TopicARN"
                                    }
                                }
                            }
                        ],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "VPCZoneIdentifier": {
                    "Fn::Split": [
                        ",",
                        {
                            "Fn::ImportValue": {
                                "Fn::Sub": "${ParentVPCStack}-SubnetsPublic"
                            }
                        }
                    ]
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": 1,
                    "Timeout": "PT10M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "CPUTooHighAlarm": {
            "Condition": "HasAlertTopic",
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Average CPU utilization over last 10 minutes higher than 80%",
                "Namespace": "AWS/EC2",
                "MetricName": "CPUUtilization",
                "Statistic": "Average",
                "Period": 600,
                "EvaluationPeriods": 1,
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": 80,
                "AlarmActions": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentAlertStack}-TopicARN"
                        }
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "TemplateID": {
            "Description": "cloudonaut.io template id",
            "Value": "vpc/vpc-ssh-bastion"
        },
        "SecurityGroup": {
            "Description": "Use this Security Group to reference incoming traffic from the SSH bastion host/instance.",
            "Value": {
                "Ref": "SecurityGroup"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SecurityGroup"
                }
            }
        },
        "IPAddress": {
            "Description": "The public IP address of the SSH bastion host/instance.",
            "Value": {
                "Ref": "EIP"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-IPAddress"
                }
            }
        }
    }
}