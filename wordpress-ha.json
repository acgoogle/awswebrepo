{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "WordPress: fault tolerant and scalable, a cloudonaut.io template",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Parent Stacks"
                    },
                    "Parameters": [
                        "ParentVPCStack",
                        "ParentSSHBastionStack",
                        "ParentAuthProxyStack",
                        "ParentAlertStack"
                    ]
                },
                {
                    "Label": {
                        "default": "Domain Name and SSL certificates"
                    },
                    "Parameters": [
                        "DomainName",
                        "CloudFrontAcmCertificate",
                        "ElbAcmCertificate"
                    ]
                },
                {
                    "Label": {
                        "default": "WordPress Parameters"
                    },
                    "Parameters": [
                        "BlogTitle",
                        "BlogAdminUsername",
                        "BlogAdminPassword",
                        "BlogAdminEMail"
                    ]
                },
                {
                    "Label": {
                        "default": "EC2 Parameters"
                    },
                    "Parameters": [
                        "WebServerKeyName",
                        "WebServerIAMUserSSHAccess",
                        "WebServerInstanceType",
                        "WebServerLogsRetentionInDays",
                        "NewRelicLicenseKey"
                    ]
                },
                {
                    "Label": {
                        "default": "Database Parameters"
                    },
                    "Parameters": [
                        "DBServerInstanceType",
                        "DBBackupRetentionPeriod"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "ParentVPCStack": {
            "Description": "Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.",
            "Type": "String"
        },
        "ParentSSHBastionStack": {
            "Description": "Optional but recommended stack name of parent SSH bastion host/instance stack based on vpc/vpc-ssh-bastion.yaml template.",
            "Type": "String",
            "Default": ""
        },
        "ParentAuthProxyStack": {
            "Description": "Optional stack name of parent auth proxy stack based on security/auth-proxy-*.yaml template.",
            "Type": "String",
            "Default": ""
        },
        "ParentAlertStack": {
            "Description": "Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.",
            "Type": "String",
            "Default": ""
        },
        "DomainName": {
            "Description": "The primary domain name of the blog.",
            "Type": "String"
        },
        "CloudFrontAcmCertificate": {
            "Description": "The ACM Certificate ARN of certificate for the CloudFront distribution.Must be created in the us-east-1 region!",
            "Type": "String"
        },
        "ElbAcmCertificate": {
            "Description": "The ACM Certificate ARN of certificate for the ELB. Must be created in the same region as this stack!",
            "Type": "String"
        },
        "BlogTitle": {
            "Description": "The title of the WordPress blog.",
            "Type": "String",
            "Default": "Just another WordPress blog"
        },
        "BlogAdminUsername": {
            "Description": "A username for the WordPress admin.",
            "Type": "String",
            "Default": "admin"
        },
        "BlogAdminPassword": {
            "Description": "A password for the WordPress admin.",
            "Type": "String",
            "NoEcho": true
        },
        "BlogAdminEMail": {
            "Description": "The email address of the WordPress admin.",
            "Type": "String"
        },
        "BlogVersion": {
            "Description": "WordPress version number",
            "Type": "String",
            "Default": "4.8"
        },
        "WebServerKeyName": {
            "Description": "Optional key pair of the ec2-user to establish a SSH connection to the web server.",
            "Type": "String",
            "Default": ""
        },
        "WebServerIAMUserSSHAccess": {
            "Description": "Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).",
            "Type": "String",
            "Default": false,
            "AllowedValues": [
                true,
                false
            ]
        },
        "WebServerInstanceType": {
            "Description": "The instance type of web servers (e.g. t2.micro).",
            "Type": "String",
            "Default": "t2.micro"
        },
        "WebServerLogsRetentionInDays": {
            "Description": "Specifies the number of days you want to retain log events.",
            "Type": "Number",
            "Default": 14,
            "AllowedValues": [
                1,
                3,
                5,
                7,
                14,
                30,
                60,
                90,
                120,
                150,
                180,
                365,
                400,
                545,
                731,
                1827,
                3653
            ]
        },
        "DBServerInstanceType": {
            "Description": "The instance type of database server (e.g. db.t2.micro).",
            "Type": "String",
            "Default": "db.t2.micro"
        },
        "DBBackupRetentionPeriod": {
            "Description": "The number of days to keep snapshots of the database.",
            "Type": "Number",
            "Default": 30
        },
        "NewRelicLicenseKey": {
            "Description": "Optional New Relic License Key will install the New Relic Servers for Linux agent.",
            "Type": "String",
            "Default": "",
            "NoEcho": true
        }
    },
    "Mappings": {
        "RegionMap": {
            "ap-south-1": {
                "AMI": "ami-47205e28"
            },
            "eu-west-2": {
                "AMI": "ami-ed100689"
            },
            "eu-west-1": {
                "AMI": "ami-d7b9a2b1"
            },
            "ap-northeast-2": {
                "AMI": "ami-e21cc38c"
            },
            "ap-northeast-1": {
                "AMI": "ami-3bd3c45c"
            },
            "sa-east-1": {
                "AMI": "ami-87dab1eb"
            },
            "ca-central-1": {
                "AMI": "ami-a7aa15c3"
            },
            "ap-southeast-1": {
                "AMI": "ami-77af2014"
            },
            "ap-southeast-2": {
                "AMI": "ami-10918173"
            },
            "eu-central-1": {
                "AMI": "ami-82be18ed"
            },
            "us-east-1": {
                "AMI": "ami-a4c7edb2"
            },
            "us-east-2": {
                "AMI": "ami-8a7859ef"
            },
            "us-west-1": {
                "AMI": "ami-327f5352"
            },
            "us-west-2": {
                "AMI": "ami-6df1e514"
            }
        }
    },
    "Conditions": {
        "HasKeyName": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "WebServerKeyName"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasIAMUserSSHAccess": {
            "Fn::Equals": [
                {
                    "Ref": "WebServerIAMUserSSHAccess"
                },
                "true"
            ]
        },
        "HasSSHBastionSecurityGroup": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ParentSSHBastionStack"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasNotSSHBastionSecurityGroup": {
            "Fn::Equals": [
                {
                    "Ref": "ParentSSHBastionStack"
                },
                ""
            ]
        },
        "HasAuthProxySecurityGroup": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ParentAuthProxyStack"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasNotAuthProxySecurityGroup": {
            "Fn::Equals": [
                {
                    "Ref": "ParentAuthProxyStack"
                },
                ""
            ]
        },
        "HasNewRelic": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NewRelicLicenseKey"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasAlertTopic": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ParentAlertStack"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Resources": {
        "WebServerLogs": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": {
                    "Ref": "WebServerLogsRetentionInDays"
                }
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "wordpress-elb",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-VPC"
                    }
                }
            }
        },
        "LoadBalancerSecurityGroupInWorld": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "HasNotAuthProxySecurityGroup",
            "Properties": {
                "GroupId": {
                    "Ref": "LoadBalancerSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 443,
                "ToPort": 443,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "LoadBalancerSecurityGroupInAuthProxy": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "HasAuthProxySecurityGroup",
            "Properties": {
                "GroupId": {
                    "Ref": "LoadBalancerSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 80,
                "ToPort": 80,
                "SourceSecurityGroupId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentAuthProxyStack}-SecurityGroup"
                    }
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "wordpress-ec2",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-VPC"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "FromPort": 80,
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "LoadBalancerSecurityGroup"
                        },
                        "ToPort": 80
                    }
                ]
            }
        },
        "WebServerSecurityGroupInSSHBastion": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "HasSSHBastionSecurityGroup",
            "Properties": {
                "GroupId": {
                    "Ref": "WebServerSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "SourceSecurityGroupId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentSSHBastionStack}-SecurityGroup"
                    }
                }
            }
        },
        "WebServerSecurityGroupInSSHWorld": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "HasNotSSHBastionSecurityGroup",
            "Properties": {
                "GroupId": {
                    "Ref": "WebServerSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "DatabaseSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "wordpress-rds",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-VPC"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 3306,
                        "ToPort": 3306,
                        "SourceSecurityGroupId": {
                            "Ref": "WebServerSecurityGroup"
                        }
                    }
                ]
            }
        },
        "HTTPCodeELB5XXTooHighAlarm": {
            "Condition": "HasAlertTopic",
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Elastic load balancer returns 5XX HTTP status codes",
                "Namespace": "AWS/ELB",
                "MetricName": "HTTPCode_ELB_5XX",
                "Statistic": "Sum",
                "Period": 60,
                "EvaluationPeriods": 1,
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": 0,
                "AlarmActions": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentAlertStack}-TopicARN"
                        }
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "LoadBalancerName",
                        "Value": {
                            "Ref": "LoadBalancer"
                        }
                    }
                ]
            }
        },
        "HTTPCodeTarget5XXTooHighAlarm": {
            "Condition": "HasAlertTopic",
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Elastic load balancer receives 5XX HTTP status codes from backends",
                "Namespace": "AWS/ELB",
                "MetricName": "HTTPCode_Backend_5XX",
                "Statistic": "Sum",
                "Period": 60,
                "EvaluationPeriods": 1,
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": 0,
                "AlarmActions": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentAlertStack}-TopicARN"
                        }
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "LoadBalancerName",
                        "Value": {
                            "Ref": "LoadBalancer"
                        }
                    }
                ]
            }
        },
        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentVPCStack}-SubnetAPublic"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentVPCStack}-SubnetBPublic"
                        }
                    }
                ],
                "Listeners": [
                    {
                        "InstancePort": 80,
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": 443,
                        "Protocol": "HTTPS",
                        "SSLCertificateId": {
                            "Ref": "ElbAcmCertificate"
                        }
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": 2,
                    "Interval": 5,
                    "Target": "TCP:80",
                    "Timeout": 3,
                    "UnhealthyThreshold": 2
                },
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Scheme": "internet-facing",
                "CrossZone": true
            }
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "DB subnet group",
                "SubnetIds": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentVPCStack}-SubnetAPrivate"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentVPCStack}-SubnetBPrivate"
                        }
                    }
                ]
            }
        },
        "Database": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": 5,
                "BackupRetentionPeriod": {
                    "Ref": "DBBackupRetentionPeriod"
                },
                "DBInstanceClass": {
                    "Ref": "DBServerInstanceType"
                },
                "DBName": "wordpress",
                "Engine": "MySQL",
                "MasterUsername": "wordpress",
                "MasterUserPassword": "wordpress",
                "VPCSecurityGroups": [
                    {
                        "Ref": "DatabaseSecurityGroup"
                    }
                ],
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "MultiAZ": true,
                "StorageType": "gp2"
            }
        },
        "WebServerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "WebServerIAMRole"
                    }
                ]
            }
        },
        "WebServerIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "logs",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "WebServerIAMPolicySSHAccess": {
            "Type": "AWS::IAM::Policy",
            "Condition": "HasIAMUserSSHAccess",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "WebServerIAMRole"
                    }
                ],
                "PolicyName": "iam",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:ListUsers"
                            ],
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:ListSSHPublicKeys",
                                "iam:GetSSHPublicKey"
                            ],
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/*"
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "LaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "default": {
                            "Fn::If": [
                                "HasNewRelic",
                                {
                                    "Fn::If": [
                                        "HasIAMUserSSHAccess",
                                        [
                                            "awslogs",
                                            "ssh-access",
                                            "newrelic",
                                            "config"
                                        ],
                                        [
                                            "awslogs",
                                            "newrelic",
                                            "config"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "HasIAMUserSSHAccess",
                                        [
                                            "awslogs",
                                            "ssh-access",
                                            "config"
                                        ],
                                        [
                                            "awslogs",
                                            "config"
                                        ]
                                    ]
                                }
                            ]
                        }
                    },
                    "awslogs": {
                        "packages": {
                            "yum": {
                                "awslogs": []
                            }
                        },
                        "files": {
                            "/etc/awslogs/awscli.conf": {
                                "content": {
                                    "Fn::Sub": "[default]\nregion = ${AWS::Region}\n[plugins]\ncwlogs = cwlogs\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/awslogs/awslogs.conf": {
                                "content": {
                                    "Fn::Sub": "[general]\nstate_file = /var/lib/awslogs/agent-state\n[/var/log/messages]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/messages\nlog_stream_name = {instance_id}/var/log/messages\nlog_group_name = ${WebServerLogs}\n[/var/log/secure]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/secure\nlog_stream_name = {instance_id}/var/log/secure\nlog_group_name = ${WebServerLogs}\n[/var/log/cron]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/cron\nlog_stream_name = {instance_id}/var/log/cron\nlog_group_name = ${WebServerLogs}\n[/var/log/cloud-init.log]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/cloud-init.log\nlog_stream_name = {instance_id}/var/log/cloud-init.log\nlog_group_name = ${WebServerLogs}\n[/var/log/cfn-init.log]\ndatetime_format = %Y-%m-%d %H:%M:%S\nfile = /var/log/cfn-init.log\nlog_stream_name = {instance_id}/var/log/cfn-init.log\nlog_group_name = ${WebServerLogs}\n[/var/log/cfn-hup.log]\ndatetime_format = %Y-%m-%d %H:%M:%S\nfile = /var/log/cfn-hup.log\nlog_stream_name = {instance_id}/var/log/cfn-hup.log\nlog_group_name = ${WebServerLogs}\n[/var/log/cfn-init-cmd.log]\ndatetime_format = %Y-%m-%d %H:%M:%S\nfile = /var/log/cfn-init-cmd.log\nlog_stream_name = {instance_id}/var/log/cfn-init-cmd.log\nlog_group_name = ${WebServerLogs}\n[/var/log/cloud-init-output.log]\nfile = /var/log/cloud-init-output.log\nlog_stream_name = {instance_id}/var/log/cloud-init-output.log\nlog_group_name = ${WebServerLogs}\n[/var/log/dmesg]\nfile = /var/log/dmesg\nlog_stream_name = {instance_id}/var/log/dmesg\nlog_group_name = ${WebServerLogs}\n[/var/log/httpd/access_log]\ndatetime_format = %b %d %H:%M:%S %Y\nfile = /var/log/httpd/access_log\nlog_stream_name = {instance_id}/var/log/httpd/access_log\nlog_group_name = ${WebServerLogs}\n[/var/log/httpd/error_log]\ndatetime_format = %d/%b/%Y:%H:%M:%S %z\nfile = /var/log/httpd/error_log\nlog_stream_name = {instance_id}/var/log/httpd/error_log\nlog_group_name = ${WebServerLogs}\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "awslogs": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "packages": {
                                        "yum": [
                                            "awslogs"
                                        ]
                                    },
                                    "files": [
                                        "/etc/awslogs/awslogs.conf",
                                        "/etc/awslogs/awscli.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "newrelic": {
                        "packages": {
                            "rpm": {
                                "newrelic-sysmond": "https://download.newrelic.com/pub/newrelic/el5/x86_64/newrelic-sysmond-2.3.0.132-1.x86_64.rpm"
                            }
                        },
                        "files": {
                            "/etc/newrelic/nrsysmond.cfg": {
                                "content": {
                                    "Fn::Sub": "license_key=${NewRelicLicenseKey}\nloglevel=info\nlogfile=/var/log/newrelic/nrsysmond.log\nlabels=StackName:${AWS::StackName};AccountId:${AWS::AccountId};Region:${AWS::Region}\n"
                                },
                                "mode": "000640",
                                "owner": "root",
                                "group": "newrelic"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "newrelic-sysmond": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/newrelic/nrsysmond.cfg"
                                    ]
                                }
                            }
                        }
                    },
                    "ssh-access": {
                        "files": {
                            "/opt/authorized_keys_command.sh": {
                                "content": "#!/bin/bash -e\nif [ -z \"$1\" ]; then\n  exit 1\nfi\nSaveUserName=\"$1\"\nSaveUserName=${SaveUserName//\"+\"/\".plus.\"}\nSaveUserName=${SaveUserName//\"=\"/\".equal.\"}\nSaveUserName=${SaveUserName//\",\"/\".comma.\"}\nSaveUserName=${SaveUserName//\"@\"/\".at.\"}\naws iam list-ssh-public-keys --user-name \"$SaveUserName\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do\n  aws iam get-ssh-public-key --user-name \"$SaveUserName\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text\ndone\n",
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/opt/import_users.sh": {
                                "content": "#!/bin/bash -e\naws iam list-users --query \"Users[].[UserName]\" --output text | while read User; do\n  SaveUserName=\"$User\"\n  SaveUserName=${SaveUserName//\"+\"/\".plus.\"}\n  SaveUserName=${SaveUserName//\"=\"/\".equal.\"}\n  SaveUserName=${SaveUserName//\",\"/\".comma.\"}\n  SaveUserName=${SaveUserName//\"@\"/\".at.\"}\n  if ! id -u \"$SaveUserName\" >/dev/null 2>&1; then\n    #sudo will read each file in /etc/sudoers.d, skipping file names that end in ���~��� or contain a ���.��� character to avoid causing problems with package manager or editor temporary/backup files.\n    SaveUserFileName=$(echo \"$SaveUserName\" | tr \".\" \" \")\n    /usr/sbin/useradd \"$SaveUserName\"\n    echo \"$SaveUserName ALL=(ALL) NOPASSWD:ALL\" > \"/etc/sudoers.d/$SaveUserFileName\"\n  fi\ndone\n",
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cron.d/import_users": {
                                "content": "*/10 * * * * root /opt/import_users.sh\n",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "a_configure_sshd_command": {
                                "command": "sed -i \"s:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g\" /etc/ssh/sshd_config"
                            },
                            "b_configure_sshd_commanduser": {
                                "command": "sed -i \"s:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g\" /etc/ssh/sshd_config"
                            },
                            "c_import_users": {
                                "command": "./import_users.sh",
                                "cwd": "/opt"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "sshd": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "commands": [
                                        "a_configure_sshd_command",
                                        "b_configure_sshd_commanduser"
                                    ]
                                }
                            }
                        }
                    },
                    "config": {
                        "packages": {
                            "yum": {
                                "php70": [],
                                "php70-opcache": [],
                                "php70-mysqlnd": [],
                                "mysql56": [],
                                "httpd24": []
                            }
                        },
                        "files": {
                            "/root/php.sh": {
                                "content": {
                                    "Fn::Sub": "#!/bin/bash -ex\nsed -i 's/;opcache.revalidate_freq=2/opcache.revalidate_freq=300/g' /etc/php-7.0.d/10-opcache.ini\n"
                                },
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/httpd/conf.d/wordpress.conf": {
                                "content": {
                                    "Fn::Sub": "<Directory \"/var/www/html\">\nOptions Indexes FollowSymLinks\nAllowOverride All\nRequire all granted\n</Directory>\n"
                                },
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            },
                            "/root/wordpress.sh": {
                                "content": {
                                    "Fn::Sub": "#!/bin/bash -ex\n# ensure than only one machine installs wp\nif mkdir /var/www/lock; then\n  cd /var/www/html\n  wget -q -T 60 https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n  if ! php wp-cli.phar core is-installed --allow-root; then\n    php wp-cli.phar core download --allow-root --version=${BlogVersion}\n    php wp-cli.phar core config --dbname='wordpress' --dbuser='wordpress' --dbpass='wordpress' --dbhost='${Database.Endpoint.Address}' --allow-root\n    php wp-cli.phar core install --url='https://${DomainName}' --title='${BlogTitle}' --admin_user='${BlogAdminUsername}' --admin_password='${BlogAdminPassword}' --admin_email='${BlogAdminEMail}' --skip-email --allow-root\n    sed -i \"/$table_prefix = 'wp_';/a\\$_SERVER['HTTPS'] = 'on';\" /var/www/html/wp-config.php \n  fi\n  chown -R apache:apache /var/www/html\n  chmod u+wrx /var/www/html/wp-content/*\n  rm wp-cli.phar\nfi\n"
                                },
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "01_php": {
                                "command": "/root/php.sh",
                                "cwd": "/var/www/html"
                            },
                            "02_wordpress": {
                                "command": "/root/wordpress.sh",
                                "cwd": "/var/www/html"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": true,
                                    "ensureRunning": true
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "AssociatePublicIpAddress": true,
                "IamInstanceProfile": {
                    "Ref": "WebServerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "WebServerInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Fn::If": [
                        "HasKeyName",
                        {
                            "Ref": "WebServerKeyName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash -x\nmkdir /var/www && mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 \"${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/\" /var/www/ && /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfiguration --region ${AWS::Region}\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}\n"
                    }
                }
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": [
                "EFSMountTargetA",
                "EFSMountTargetB"
            ],
            "Properties": {
                "LoadBalancerNames": [
                    {
                        "Ref": "LoadBalancer"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                },
                "MinSize": 2,
                "MaxSize": 4,
                "DesiredCapacity": 2,
                "Cooldown": 60,
                "HealthCheckGracePeriod": 300,
                "HealthCheckType": "ELB",
                "NotificationConfigurations": {
                    "Fn::If": [
                        "HasAlertTopic",
                        [
                            {
                                "NotificationTypes": [
                                    "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                    "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                                ],
                                "TopicARN": {
                                    "Fn::ImportValue": {
                                        "Fn::Sub": "${ParentAlertStack}-TopicARN"
                                    }
                                }
                            }
                        ],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "VPCZoneIdentifier": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentVPCStack}-SubnetAPublic"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentVPCStack}-SubnetBPublic"
                        }
                    }
                ],
                "Tags": [
                    {
                        "PropagateAtLaunch": true,
                        "Value": "wordpress",
                        "Key": "Name"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT10M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "CPUTooHighAlarm": {
            "Condition": "HasAlertTopic",
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Average CPU utilization over last 10 minutes higher than 80%",
                "Namespace": "AWS/EC2",
                "MetricName": "CPUUtilization",
                "Statistic": "Average",
                "Period": 600,
                "EvaluationPeriods": 1,
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": 80,
                "AlarmActions": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentAlertStack}-TopicARN"
                        }
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ]
            }
        },
        "ScalingUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "PercentChangeInCapacity",
                "MinAdjustmentStep": 1,
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "Cooldown": 900,
                "ScalingAdjustment": 25
            }
        },
        "CPUHighAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": 1,
                "Statistic": "Average",
                "Threshold": 60,
                "AlarmDescription": "Alarm if CPU load is high.",
                "Period": 300,
                "AlarmActions": [
                    {
                        "Ref": "ScalingUpPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "ScalingDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "PercentChangeInCapacity",
                "MinAdjustmentStep": 1,
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "Cooldown": 300,
                "ScalingAdjustment": -25
            }
        },
        "CPULowAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": 3,
                "Statistic": "Average",
                "Threshold": 30,
                "AlarmDescription": "Alarm if CPU load is low.",
                "Period": 300,
                "AlarmActions": [
                    {
                        "Ref": "ScalingDownPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "EFSFileSystem": {
            "Type": "AWS::EFS::FileSystem",
            "Properties": {
                "FileSystemTags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-efs"
                        }
                    }
                ]
            }
        },
        "EFSMountTargetA": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "EFSFileSystem"
                },
                "SubnetId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-SubnetAPublic"
                    }
                },
                "SecurityGroups": [
                    {
                        "Ref": "EFSSecurityGroup"
                    }
                ]
            }
        },
        "EFSMountTargetB": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "EFSFileSystem"
                },
                "SubnetId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-SubnetBPublic"
                    }
                },
                "SecurityGroups": [
                    {
                        "Ref": "EFSSecurityGroup"
                    }
                ]
            }
        },
        "EFSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allowing access to EFS",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-VPC"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 2049,
                        "ToPort": 2049,
                        "SourceSecurityGroupId": {
                            "Ref": "WebServerSecurityGroup"
                        }
                    }
                ]
            }
        },
        "CloudFrontDistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Aliases": [
                        {
                            "Ref": "DomainName"
                        }
                    ],
                    "Comment": {
                        "Ref": "DomainName"
                    },
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::GetAtt": [
                                    "LoadBalancer",
                                    "DNSName"
                                ]
                            },
                            "Id": "elb",
                            "CustomOriginConfig": {
                                "OriginProtocolPolicy": "https-only"
                            }
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "AllowedMethods": [
                            "DELETE",
                            "GET",
                            "HEAD",
                            "OPTIONS",
                            "PATCH",
                            "POST",
                            "PUT"
                        ],
                        "DefaultTTL": 0,
                        "MaxTTL": 0,
                        "MinTTL": 0,
                        "ForwardedValues": {
                            "QueryString": true,
                            "Headers": [
                                "*"
                            ],
                            "Cookies": {
                                "Forward": "all"
                            }
                        },
                        "TargetOriginId": "elb",
                        "ViewerProtocolPolicy": "redirect-to-https",
                        "Compress": true
                    },
                    "CacheBehaviors": [
                        {
                            "PathPattern": "wp-includes/*",
                            "AllowedMethods": [
                                "DELETE",
                                "GET",
                                "HEAD",
                                "OPTIONS",
                                "PATCH",
                                "POST",
                                "PUT"
                            ],
                            "DefaultTTL": 900,
                            "MaxTTL": 900,
                            "MinTTL": 900,
                            "ForwardedValues": {
                                "QueryString": true,
                                "Headers": [
                                    "Host"
                                ]
                            },
                            "TargetOriginId": "elb",
                            "ViewerProtocolPolicy": "redirect-to-https",
                            "Compress": true
                        },
                        {
                            "PathPattern": "wp-content/*",
                            "AllowedMethods": [
                                "DELETE",
                                "GET",
                                "HEAD",
                                "OPTIONS",
                                "PATCH",
                                "POST",
                                "PUT"
                            ],
                            "DefaultTTL": 900,
                            "MaxTTL": 900,
                            "MinTTL": 900,
                            "ForwardedValues": {
                                "QueryString": true,
                                "Headers": [
                                    "Host"
                                ]
                            },
                            "TargetOriginId": "elb",
                            "ViewerProtocolPolicy": "redirect-to-https",
                            "Compress": true
                        }
                    ],
                    "Enabled": true,
                    "HttpVersion": "http2",
                    "PriceClass": "PriceClass_All",
                    "ViewerCertificate": {
                        "AcmCertificateArn": {
                            "Ref": "CloudFrontAcmCertificate"
                        },
                        "SslSupportMethod": "sni-only",
                        "MinimumProtocolVersion": "TLSv1"
                    }
                }
            }
        }
    },
    "Outputs": {
        "TemplateID": {
            "Description": "cloudonaut.io template id",
            "Value": "wordpress/wordpress-ha"
        },
        "CloudFrontID": {
            "Description": "The ID of the CloudFront distribution.",
            "Value": {
                "Ref": "CloudFrontDistribution"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-CloudFrontARN"
                }
            }
        },
        "CloudFrontDomainName": {
            "Description": "The domain name of the CloudFront distribution.",
            "Value": {
                "Fn::Sub": "${CloudFrontDistribution.DomainName}"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-CloudFrontDomainName"
                }
            }
        }
    }
}